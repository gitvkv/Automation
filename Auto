import socket

def resolve_name_to_ip(hostname):
    """Resolves a hostname to its IP address."""
    try:
        ip_address = socket.gethostbyname(hostname)
        return ip_address
    except socket.gaierror:
        return None

def resolve_ip_to_name(ip_address):
    """Resolves an IP address to its hostname."""
    try:
        hostname, _, _ = socket.gethostbyaddr(ip_address)
        return hostname
    except socket.herror:
        return None

def is_valid_ip(address):
    """Checks if a string is a valid IPv4 address."""
    try:
        socket.inet_pton(socket.AF_INET, address)
        return True
    except socket.error:
        return False

def main():
    """Main function to run the interactive resolution script."""
    print("Welcome to the Name/IP Resolution Tool!")
    print("Enter a list of hostnames or IP addresses, one per line.")
    print("Type 'done' on a new line when you are finished entering inputs.")

    inputs = []
    while True:
        user_input = input("Enter hostname/IP (or 'done'): ").strip()
        if user_input.lower() == 'done':
            break
        if user_input:
            inputs.append(user_input)

    if not inputs:
        print("No inputs provided. Exiting.")
        return

    print("\n--- Resolution Results ---")
    for item in inputs:
        if is_valid_ip(item):
            # It's an IP, try to resolve to name
            hostname = resolve_ip_to_name(item)
            if hostname:
                print(f"IP: {item} -> Hostname: {hostname}")
            else:
                print(f"IP: {item} -> Hostname: NOT FOUND (or error)")
        else:
            # Assume it's a hostname, try to resolve to IP
            ip_address = resolve_name_to_ip(item)
            if ip_address:
                print(f"Hostname: {item} -> IP: {ip_address}")
            else:
                print(f"Hostname: {item} -> IP: NOT FOUND (or error)")
    print("--------------------------")

if __name__ == "__main__":
    main()
