IR SKUs (tightly coupled physical/logical design)
- Advantages
  - Strong standardization across large numbers of similar racks
  - Consistent configs and port mappings reduce variance and drift
  - Hosting team knows exactly how to cable servers
- Disadvantages
  - Low flexibility when requirements change
  - Requires up-front agreement between hosting and network teams on physical layout and port mapping
  - Not ideal for environments with frequent hardware or topology changes
- Best fit
  - Large, stable data centers with repeatable rack designs and infrequent change
- Mitigations
  - Maintain a change window and governance for exceptions
  - Keep a validated port-mapping catalog and golden configs

Utility SKUs (rack-efficient but tied to physical design)
- Advantages
  - Better rack utilization; racks aren’t dedicated to a single service
  - More flexible than IR; multiple utility SKUs can be assigned to a rack pair (Mini-POD)
- Disadvantages
  - Still coupled to the rack’s physical design and cabling model
  - Requires careful coordination to ensure correct server-to-switch connections
- Best fit
  - Mixed-use pods where service types vary but physical patterns are still known
- Mitigations
  - Maintain canonical rack wiring diagrams
  - Use labeling and automated validation to reduce cabling errors

Flexible Utility SKUs (Agora Lite; decoupled from physical design)
- Advantages
  - Can be deployed on any utility “empty” rack regardless of its physical layout
  - High flexibility for dynamic capacity adds and heterogeneous hardware
- Disadvantages
  - More operational complexity: interface descriptions and per-port intent must be set accurately
  - Network engineers must be actively involved in server-to-port mapping
- Best fit
  - Environments with frequent change, diverse hardware, or variable service placement
- Mitigations
  - Use templating and intent-based tooling to auto-generate interface descriptions
  - Enforce a “no handoff without mapping” checklist and change reviews

Soft SKUs (maximally flexible, model-driven)
- Advantages
  - Very high flexibility; can cover most (≈90%) requirements
  - Broad reuse across sites and scenarios
- Disadvantages
  - More complex NIDM/site-value provisioning
  - Longer planning lead time; higher risk of human error without strong process/tooling
- Best fit
  - Highly dynamic, multi-tenant, or rapidly evolving environments needing fast reconfiguration
- Mitigations
  - Strong schema validation, preflight checks, and CI/CD for NIDM changes
  - Parameter catalogs, guardrails, and peer review to reduce errors
