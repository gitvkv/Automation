Proposal: Workflow Improvements for Server Room Design and NIDM Flexibility

We propose a revision to the current workflow for both existing and future server room deployments. The goal is to reduce the number of SKUs and accelerate time to market, while maintaining control and consistency in configurations.

Background & Rationale

* Business requirements are evolving rapidly and are expected to continue changing.
* Making changes in NIDM to reflect evolving needs is time-consuming and rigid.
* To address this, data modeling needs to be more flexible, and at the same time, controls must be enforced to prevent config drift from established standards.


Proposed Workflow Changes

Step 1: Requirement Finalization and Decoupling Rack Layouts

* Engineers must work with server, storage, and application teams to finalize and document requirements.
* Currently, server/storage/application requirements are tightly coupled with rack layout design.
* Proposal: For Agora Lite, decouple application/service requirements from the physical rack layout.

  * Rack layouts vary across server rooms (e.g., 5kW vs 12kW support, mini pod vs standard pod).
  * Physical deployment should adapt to site-specific power and cooling capabilities, but logical requirements should remain standardized.


Step 2: Modular Configuration Design

Break down configurations into three modular layers:

1. Baseline Configuration:

   * Common across all devices and all PODs.
   * Must support core capabilities such as:

     * Multicast
     * Basic BGP routing
     * All required VRFs

2. Service/Application Configuration:

   * Service-specific features or application connectivity
   * Only added based on requirement scope

3. Interface Configuration:

   * Final layer tailored to specific cabling and interface mappings
   * Should be automated wherever possible


Step 3: Define Required NIDM SKUs

The following SKUs should be defined in NIDM to streamline operational workflows:

1. POD Build SKU
  * Includes base build config, routing, core services

2. VLAN Creation SKU
  * Covers end-to-end provisioning of VLANs, including tagging, VRF binding, and route advertisements

3.  Interface Configuration SKU
  * Interface-level configs mapped to finalized physical connectivity




















Changing the IP address of a VM server, especially in a production environment, must be done carefully to avoid outages, security issues, or application downtime. Hereâ€™s a structured breakdown of **steps** and **key considerations** to ensure a safe transition.

---

## ðŸ”§ Steps to Change IP Address on a VM Server

### 1. **Pre-Change Validation and Planning**

* **Review current network design**: VLANs, subnets, gateways, DNS, routing.
* **Determine new IP**: Ensure it's within correct subnet and not in use (IPAM check).
* **Understand dependencies**:

  * Applications (hardcoded IPs?)
  * Firewall rules
  * DNS records (A/AAAA, PTR)
  * Load balancers
  * Monitoring tools
  * Backup jobs or replication
  * Configuration management tools (like Ansible, Puppet)

---

### 2. **Take Backups and Snapshots**

* **VM snapshot** (if possible)
* Backup important config files and application data

---

### 3. **Schedule a Maintenance Window**

* Inform stakeholders
* Ensure business approval
* Align with change management processes (if ITIL or similar followed)

---

### 4. **Update DNS and Other Records in Advance**

* Modify or create DNS records (if you plan to use FQDN)
* Update monitoring, CMDB, inventory tools

---

### 5. **Change the IP Address**

* OS level config:

  * **Linux**: `/etc/netplan/`, `/etc/network/interfaces`, `nmcli`, or `ip` depending on distro
  * **Windows**: `ncpa.cpl` or PowerShell (`Set-NetIPAddress`)
* Update the default gateway if needed
* Update `/etc/hosts` or `C:\Windows\System32\drivers\etc\hosts` (optional)

---

### 6. **Restart Network Service / Reboot (if needed)**

* Restart networking (`systemctl restart network`, `netplan apply`, etc.)
* Confirm IP with `ip a`, `ifconfig`, or `ipconfig`

---

### 7. **Validate and Test**

* Ping the gateway
* DNS resolution
* Access application/web UI/SSH/RDP
* Check logs for anomalies
* Validate firewall logs and monitoring alerts

---

### 8. **Update Firewalls / Security Groups**

* If you're using cloud (AWS/GCP/Azure), update SGs
* On-prem: update ACLs/firewalls with new IP

---

### 9. **Update Documentation**

* CMDB, Visio/network diagram, IPAM, Confluence, etc.

---

## ðŸ§  Key Considerations in Production Environments

| Area                         | Things to Consider                                                                    |
| ---------------------------- | ------------------------------------------------------------------------------------- |
| **Application Impact**       | Applications that bind to IPs may need reconfiguration                                |
| **Hardcoded IPs**            | Scripts, DB config files, app settings, integration endpoints                         |
| **Firewall Rules**           | Egress/ingress traffic may be blocked after change                                    |
| **DNS TTL**                  | Lower DNS TTL temporarily to allow faster propagation                                 |
| **Monitoring/Alerting**      | Update monitoring tools (Zabbix, Prometheus, etc.) with new IP                        |
| **Backups and Replications** | Ensure backup systems can reach the server post-change                                |
| **Cluster Membership**       | If VM is part of a cluster (K8s, DB clusters), IP change may break trust or heartbeat |
| **Automation**               | Ansible inventory, CI/CD pipelines might need IP update                               |
| **Routing**                  | Confirm routes and gateway connectivity post-IP change                                |
| **Security Tools**           | Update IP in firewall, WAF, SIEM, etc. if applicable                                  |

---

## âœ… Post-Change Checklist

* [ ] Can reach the server via new IP
* [ ] All apps running and accessible
* [ ] DNS name resolving correctly
* [ ] Monitoring tools showing green
* [ ] No firewall or connectivity issues
* [ ] Change documented and closed properly

---

Let me know your environment details (Linux/Windows, on-prem/cloud, etc.) if you want commands or a tailored runbook.
